version: "3.8"

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: django_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-django_db}
      POSTGRES_USER: ${DB_USER:-django_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-django_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-django_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - django_network

  # Redis (Optional - for caching and Celery)
  redis:
    image: redis:7-alpine
    container_name: django_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - django_network

  # Django Application
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: django_app
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --reload
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "${APP_PORT:-8000}:8000"
    env_file:
      - .env.docker
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - django_network

  # Celery Worker (Optional)
  celery_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: django_celery_worker
    command: celery -A config worker -l info
    volumes:
      - .:/app
    env_file:
      - .env.docker
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - django_network

  # Celery Beat (Optional - for scheduled tasks)
  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: django_celery_beat
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - .env.docker
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - django_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  django_network:
    driver: bridge
