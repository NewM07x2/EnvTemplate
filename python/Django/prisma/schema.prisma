// Prisma schema for Django template project
// This schema can be used alongside Django ORM or independently

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model (mirrors Django's custom User model)
model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  username   String   @unique
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  bio        String?
  avatar     String?
  isVerified Boolean  @default(false) @map("is_verified")
  isActive   Boolean  @default(true) @map("is_active")
  isStaff    Boolean  @default(false) @map("is_staff")
  
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  
  // Relations
  posts      Post[]
  
  @@index([email])
  @@index([username])
  @@map("users_user")
}

// Category model
model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  posts       Post[]
  
  @@map("posts_category")
}

// Post model
model Post {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  isPublished Boolean   @default(false) @map("is_published")
  publishedAt DateTime? @map("published_at")
  viewsCount  Int       @default(0) @map("views_count")
  likesCount  Int       @default(0) @map("likes_count")
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Foreign keys
  authorId    Int       @map("author_id")
  categoryId  Int?      @map("category_id")
  
  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  @@index([slug])
  @@index([authorId])
  @@index([isPublished, publishedAt])
  @@map("posts_post")
}
