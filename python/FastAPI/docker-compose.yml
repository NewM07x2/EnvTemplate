version: "3.8"

services:
  # PostgreSQL データベース
  postgres:
    image: postgres:16-alpine
    container_name: fastapi-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-fastapi_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis キャッシュ（オプション - 必要に応じて削除可能）
  redis:
    image: redis:7-alpine
    container_name: fastapi-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # FastAPI アプリケーション
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
    container_name: fastapi-app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-fastapi_db}
      - REDIS_URL=redis://redis:6379/0
      - APP_ENV=production
      - DEBUG=False
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./main.py:/app/main.py
    networks:
      - app-network
    command: >
      sh -c "
        prisma generate &&
        prisma db push &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
